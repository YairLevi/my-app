name: Build Test GORM

on: [push]


jobs:
  build:
    permissions: write-all
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

#      - name: Install WebKitGTK dependency
#        run: |
#          Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/p/?LinkId=2124703" -OutFile "webview2_runtime.msi"
#          Start-Process msiexec.exe -Wait -ArgumentList '/i webview2_runtime.msi /quiet'

#      - name: Set up Go
#        uses: actions/setup-go@v2
#        with:
#          go-version: '1.18'

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

      - name: Build Wails app
        run: wails build

#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: "ToDelete"
#          release_name: "toDelete"
#          draft: false
#          prerelease: false
#
#      - name: Upload Artifact
#        id: upload_release_asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: ./build/bin/my-app.exe
#          asset_content_type: application/octet-stream
#          asset_name: my-app.exe

#jobs:
#  build:
#    runs-on: windows-latest
#    steps:
#
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Install Go
#        uses: actions/setup-go@v2.1.3
#        with:
#          go-version: 1.20
#      - name: Install GORM
#        run: |
#          go install -a gorm.io/gorm
#      - name: root dir
#        run: |
#          go build -o app.exe test/testGCC.go
#      - name: choco updage mingw
#        run: |
#          choco upgrade mingw --version=13.1

#      - name: Install MSYS2
#        uses: msys2/setup-msys2@v2
#        with:
#          msystem: MINGW64
#          update: true
#          install: mingw-w64-x86_64-toolchain
#
#      - name: msys2 gcc version
#        working-directory: C:\msys64\mingw64\bin
#        run: |
#          dir
#
#      - name: add to path
#        run: |
#          Add-Content $env:GITHUB_PATH "C:\msys64\mingw64\bin"

#      - name: add to path
#        run: |
#          setx PATH "%PATH%;C:\msys64\mingw64\bin"
          

#      - name: the global gcc version (supposed to match!!)
#        run: |
#          gcc -v


     
#
#      - name: Install Go
#        uses: actions/setup-go@v2.1.3
#        with:
#          go-version: 1.18
#      - name: Build with Go
#        run: |
#          go build -o app.exe testGCC.go

#      - name: Build with Go
#        run: |
#          go build -o app.exe testGCC.go


######################################################################

#name: Test GORM GCC
#
#on: [ push ]
#
#jobs:
#  build:
#    runs-on: windows-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#      - name: Install Go
#        uses: actions/setup-go@v2.1.3
#        with:
#          go-version: 1.17.2
#
#      - name: Set up MSYS2
#        run: |
#          # Download MSYS2 installer
#          curl -L -o msys2-installer.exe https://github.com/msys2/msys2-installer/releases/latest/download/msys2-x86_64-latest.exe
#
#          # Install MSYS2 silently
#          ./msys2-installer.exe -d
#
#          # Initialize MSYS2
#          source ${{ runner.workspace }}/msys64/msys2_shell.cmd -mingw64 -defterm -no-start -here -l -c "echo Hello from MSYS2"
#
#      - name: Install GCC 64-bit
#        run: |
#          # Update MSYS2 package databases
#          pacman -Syu --noconfirm
#
#          # Install GCC 64-bit
#          pacman -S --noconfirm mingw-w64-x86_64-gcc
#
#          # Check the installed GCC version
#          g++ --version
#
#      - name: Build with Go
#        run: |
#          go build -o app.exe .
